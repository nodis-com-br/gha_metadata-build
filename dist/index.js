(()=>{var __webpack_modules__={827:(e,r,t)=>{const a=t(738);e.exports={bucketPrefix:"nodis",lambdaBucketPrefix:"nodis-lambda",containerRegistry:{public:"docker.io/nodisbr",private:"registry.nodis.com.br"},packageOverrideKeys:["overrides","annotations"],environment:{dev:{versionPattern:/^\d+\.\d+\.\d+-dev\.\d+$/},quality:{versionPattern:/^\d+\.\d+\.\d+-rc\.\d+$/},prod:{versionPattern:/^\d+\.\d+\.\d+$/},catalog:{versionPattern:/^\d+\.\d+\.\d+$/},backoffice:{versionPattern:/^\d+\.\d+\.\d+$/}},branchType:{dev:{pattern:/^refs\/heads\/develop$/,environment:"dev",preRelease:true},rc:{pattern:/^refs\/heads\/release\/.+$/,environment:"quality",preRelease:true},legacy:{pattern:/^refs\/heads\/legacy\/.+$/,environment:null,preRelease:false},hotfix:{pattern:/^refs\/heads\/hotfix\/.+$/,environment:"quality",preRelease:false},default:{pattern:/^refs\/heads\/(main|master)$/,environment:null,preRelease:false}},team:{devback:{repository:"maestro_devback",environment:"prod"},devfront:{repository:"maestro_devback",environment:"prod"},experimento:{repository:"maestro_devback",environment:"prod"},devops:{repository:"maestro_devback",environment:"prod"},backoffice:{repository:"maestro_devback",environment:"backoffice"},catalog:{repository:"maestro_catalog",environment:"catalog"}},interpreter:["python","nodejs","shell","docker","helm"],projectWorkflow:{package:{classes:["library","python-app"],packageFile:"manifest.json",updaterType:"json"},kubernetesWorkload:{classes:["flask-app","nodejs-app","django-app","cronjob","csharp-app"],packageFile:"manifest.json",updaterType:"json"},publicImage:{classes:["public-image"],packageFile:"manifest.json",updaterType:"json"},helmChart:{classes:["helm-chart"],packageFile:"Chart.yaml",updaterModule:a},webapp:{classes:["react-app"],packageFile:"package.json",updaterType:"json"},lambdaFunction:{classes:["lambda-function"],packageFile:"manifest.json",updaterType:"json"}}}},715:module=>{module.exports=eval("require")("@actions/artifact")},105:module=>{module.exports=eval("require")("@actions/core")},959:module=>{module.exports=eval("require")("@damlys/standard-version-updater-docker/dist/docker-compose.js")},685:module=>{module.exports=eval("require")("@damlys/standard-version-updater-docker/dist/dockerfile.js")},341:module=>{module.exports=eval("require")("dotenv")},585:module=>{module.exports=eval("require")("node-fetch")},158:module=>{module.exports=eval("require")("standard-version")},738:module=>{module.exports=eval("require")("standard-version-updater-yaml")},546:module=>{module.exports=eval("require")("yaml")},147:e=>{"use strict";e.exports=require("fs")},282:e=>{"use strict";e.exports=require("process")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var r=__webpack_module_cache__[e];if(r!==undefined){return r.exports}var t=__webpack_module_cache__[e]={exports:{}};var a=true;try{__webpack_modules__[e](t,t.exports,__nccwpck_require__);a=false}finally{if(a)delete __webpack_module_cache__[e]}return t.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(105);const r=__nccwpck_require__(715);const t=__nccwpck_require__(147);const a=__nccwpck_require__(546);const o=__nccwpck_require__(585);const n=__nccwpck_require__(827);const s=__nccwpck_require__(282);const i=__nccwpck_require__(158);const _=__nccwpck_require__(685);const c=__nccwpck_require__(959);__nccwpck_require__(341).config();function getPreReleaseType(e){for(const r in n.branchType){if(n.branchType.hasOwnProperty(r)&&n.branchType[r].preRelease&&e.match(n.branchType[r].pattern))return r}}function parsePackageFile(r){try{return a.parse(t.readFileSync(r,"utf-8"))}catch(r){e.setFailed(r)}}function getMetadataFromTopics(r,t,a,o){let n=[];for(const e of a){if(Array.isArray(t))t.includes(e)&&n.push(e);else e in t&&n.push(e)}if(n.length===1)return n[0];else if(n.length===0)o&&e.setFailed("Project missing "+r+" topic");else e.setFailed("Project has multiple "+r+" topics ["+n.join(" ")+"]")}function aggregateProjectClasses(){let e=[];for(const r in n.projectWorkflow){if(n.projectWorkflow.hasOwnProperty(r))e=e.concat(n.projectWorkflow[r].classes)}return e}function getProjectWorkflow(e){for(const r in n.projectWorkflow){if(n.projectWorkflow.hasOwnProperty(r)&&n.projectWorkflow[r].classes.includes(e))return r}}function getDeployEnvironment(e){if(e.PRE_RELEASE_TYPE)return n.branchType[e.PRE_RELEASE_TYPE].environment;else if(e.HOTFIX)return n.branchType.hotfix.environment;else return n.team[e.TEAM].environment}function matchVersionToBranch(r){if(s.env.GITHUB_EVENT_NAME!=="pull_request"&&!r.PROJECT_VERSION.match(n.environment[r.DEPLOY_ENVIRONMENT].versionPattern)){e.setFailed(["Branch mismatch: version",r.PROJECT_VERSION,"should not be committed to branch",r.TARGET_BRANCH].join(" "))}}function publishMetadata(a){const o=r.create();const s=parsePackageFile(a.PACKAGE_FILE,"utf-8");for(const e in n.packageOverrideKeys){const r=n.packageOverrideKeys[e];if(r in s){for(const e in s[r])if(s[r].hasOwnProperty(e))a[e]=s[r][e]}}t.writeFileSync("./metadata.json",JSON.stringify(a,null,2));o.uploadArtifact("metadata",["metadata.json"],".").catch((r=>e.setFailed(r)));e.info("Metadata: "+JSON.stringify(a,null,4))}let p,l={SKIP_BUMP:e.getBooleanInput("skip_bump"),PROJECT_NAME:s.env.GITHUB_REPOSITORY.split("/")[1],TARGET_BRANCH:s.env.GITHUB_BASE_REF?"refs/heads/"+s.env.GITHUB_BASE_REF:s.env.GITHUB_REF};l.PRE_RELEASE_TYPE=getPreReleaseType(l.TARGET_BRANCH);l.LEGACY=!!l.TARGET_BRANCH.match(n.branchType.legacy.pattern);l.HOTFIX=!!l.TARGET_BRANCH.match(n.branchType.hotfix.pattern);const d=s.env.GITHUB_API_URL+"/repos/"+s.env.GITHUB_REPOSITORY+"/topics";const E={Authorization:"token "+e.getInput("github_token"),Accept:"application/vnd.github.mercy-preview+json"};o(d,{headers:E}).then((e=>{if(e["status"]===200)return e["json"]();else throw["Could not retrieve topics:",e["status"],e["statusText"]].join(" ")})).then((r=>{const t=r["names"];l.TEAM=getMetadataFromTopics("team",n.team,t,true);l.INTERPRETER=getMetadataFromTopics("interpreter",n.interpreter,t,true);l.PROJECT_CLASS=getMetadataFromTopics("class",aggregateProjectClasses(),t,true);l.PROJECT_WORKFLOW=getProjectWorkflow(l.PROJECT_CLASS);l.PACKAGE_FILE=s.env.GITHUB_WORKSPACE+"/"+n.projectWorkflow[l.PROJECT_WORKFLOW].packageFile;p=parsePackageFile(l.PACKAGE_FILE,"utf-8");l.SKIP_TESTS="skip_tests"in p?p["skip_tests"]:false;l.PRE_BUMP_VERSION=p["version"];const a={filename:l.PACKAGE_FILE};if("updaterModule"in n.projectWorkflow[l.PROJECT_WORKFLOW])a.updater=n.projectWorkflow[l.PROJECT_WORKFLOW].updaterModule;else if("updaterType"in n.projectWorkflow[l.PROJECT_WORKFLOW])a.type=n.projectWorkflow[l.PROJECT_WORKFLOW].updaterType;let o={packageFiles:[a],bumpFiles:[a,{filename:"Dockerfile",updater:_},{filename:"docker-compose.yml",updater:c}],firstRelease:e.getBooleanInput("first_release"),silent:l.SKIP_BUMP,dryRun:l.SKIP_BUMP,gitTagFallback:false};if(l.PRE_RELEASE_TYPE)o.prerelease=l.PRE_RELEASE_TYPE;return i(o)})).then((()=>{l.PROJECT_VERSION=parsePackageFile(l.PACKAGE_FILE,"utf-8").version;switch(l.PROJECT_WORKFLOW){case"package":break;case"helmChart":l.PROJECT_NAME=l.PROJECT_NAME.replace(/^charts_/,"");break;case"publicImage":l.DOCKER_BUILD_FROM_MASTER=true;l.DOCKER_IMAGE_NAME=n.containerRegistry.public+"/"+l.PROJECT_NAME.replace(/^dk_/,"");l.DOCKER_IMAGE_TAGS="latest "+l.PROJECT_VERSION;break;case"kubernetesWorkload":l.DOCKER_BUILD_FROM_MASTER=false;l.DEPLOY_ENVIRONMENT=getDeployEnvironment(l);matchVersionToBranch(l);l.MAESTRO_REPOSITORY=n.team[l.TEAM].repository;l.DOCKER_IMAGE_NAME=n.containerRegistry.private+"/"+l.PROJECT_NAME;l.DOCKER_IMAGE_TAGS=[l.PROJECT_VERSION,l.DEPLOY_ENVIRONMENT,l.LEGACY?"legacy":"latest"].join(" ");if(l.TARGET_BRANCH.match(n.branchType.default.pattern)&&l.PRE_BUMP_VERSION.match(n.environment.quality.versionPattern)){l.VALIDATED_VERSION=l.PRE_BUMP_VERSION}break;case"lambdaFunction":l.AWS_REGION=s.env.AWS_REGION;l.FUNCTION_NAME=l.PROJECT_NAME.replace(/^lb_/,"");l.ARTIFACT_NAME=l.FUNCTION_NAME+".zip";l.ARTIFACT_FULLNAME=l.FUNCTION_NAME+"-"+l.PROJECT_VERSION+".zip";l.ARTIFACT_PATH=l.FUNCTION_NAME;l.ARTIFACT_BUCKET=n.lambdaBucketPrefix+"-"+l.AWS_REGION;break;case"webapp":l.DEPLOY_ENVIRONMENT=getDeployEnvironment(l);matchVersionToBranch(l);l.SUBDOMAIN=p["subdomain"];l.CUSTOM_TYPES=JSON.stringify(p.hasOwnProperty("custom_types")?p["custom_types"]:"[]");l.ARTIFACT_FILENAME=l.PROJECT_NAME+"-"+l.PROJECT_VERSION+".tgz";l.WEBAPP_BUCKET=n.bucketPrefix+"-"+l.DEPLOY_ENVIRONMENT+"-"+l.SUBDOMAIN;l.VAULT_ROLE=l.DEPLOY_ENVIRONMENT+"-"+l.SUBDOMAIN;break;default:e.setFailed("Workflow not found for "+l.PROJECT_CLASS)}publishMetadata(l)})).catch((r=>e.setFailed(r)))})();module.exports=__webpack_exports__})();